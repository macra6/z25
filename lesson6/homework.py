import time


"""
Ex1
–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–ø–∞–∫–æ–≤–æ–∫.
–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print_given, –∫–æ—Ç–æ—Ä–∞—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
–±—É–¥–µ—Ç —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞
(–µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–µ –∏–º–µ–µ—Ç—Å—è),
–∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, —Ç–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç–∞.

–ê—Ä–≥—É–º–µ–Ω—Ç—ã –±–µ–∑ –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω—ã —Ä–∞–Ω—å—à–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö.
–ü–æ—Ä—è–¥–æ–∫ –ø–µ—á–∞—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –∏–º–µ–Ω–∏ –≤–∞–∂–µ–Ω: –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø–æ—Ä—è–¥–∫–æ–º,
–≤ –∫–æ—Ç–æ—Ä–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è. –ü–æ—Ä—è–¥–æ–∫ –ø–µ—á–∞—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å –∏–º–µ–Ω–µ–º –Ω–µ–≤–∞–∂–µ–Ω.

–ü—Ä–∏–º–µ—Ä:
print_given(1, 2, 3, [1, 2, 3], "one", "two", "three", two = 2, one = 1)
>>> 1 <class "int">
2 <class "int">
3 <class "int">
[1, 2, 3] <class "list">
one <class "str">
two <class "str">
three <class "str">
one 1 <class "int">
two 2 <class "int">

print_given()
"""
class Print_given:

    def __init__(self, unit):
        self.type = type(unit)
        self.unit = unit

    def printing(self):
        print(self.type, self.unit)

element = (1, 2, 3, [1, 2, 3], "one", "two", "three")

for i in element:
    a = Print_given(i)
    a.printing()


# def print_given(*args, **kwargs):
#     for arg in args:
#         print(arg, type(arg))
#     for key, value in kwargs.items():
#         print(key, value, type(value))


"""
Ex2
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é sort_by_abc,
–Ω–∞ –≤—Ö–æ–¥ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–¥–∞—ë—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –±–æ–ª—å—à–µ —Å–æ—Ç–Ω–∏)
—Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª (–∫–∞–∂–¥–æ–µ –Ω–µ –º–µ–Ω—å—à–µ 0 –∏ –Ω–µ –±–æ–ª—å—à–µ 19).

–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –≤ –ø–æ—Ä—è–¥–∫–µ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è
–Ω–∞–∑–≤–∞–Ω–∏–π —ç—Ç–∏—Ö —á–∏—Å–µ–ª –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.

–¢.–µ., —Å–∫–∞–∂–µ–º —á–∏—Å–ª–∞ 1, 2, 3 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ 1, 3, 2,
–ø–æ—Å–∫–æ–ª—å–∫—É —Å–ª–æ–≤–æ two –≤ —Å–ª–æ–≤–∞—Ä–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ —Å–ª–æ–≤–∞ three,
–∞ —Å–ª–æ–≤–æ three -- –ø–æ–∑–∂–µ —Å–ª–æ–≤–∞ one (–∏–Ω–∞—á–µ –≥–æ–≤–æ—Ä—è, –ø–æ—Å–∫–æ–ª—å–∫—É
–≤—ã—Ä–∞–∂–µ–Ω–∏–µ "one" < "three" < "two" —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–∏–Ω–Ω—ã–º)

–ü—Ä–∏–º–µ—Ä:
Sample Input:
[0, 1, 1, 2, 3, 5, 8, 13]
Sample Output:
[8, 5, 1, 1, 13, 3, 2, 0]

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
number_names = {
        0: "zero", 1: "one", 2: "two", 3: "three", 4: "four", 5: "five",
        6: "six", 7: "seven", 8: "eight", 9: "nine",
        10: "ten", 11: "eleven", 12: "twelve",
        13: "thirteen", 14: "fourteen", 15: "fifteen", 16: "sixteen",
        17: "seventeen",  18: "eighteen", 19: "nineteen"}
"""


def sort_by_abc(_list):
    number_names = {
        0: "zero", 1: "one", 2: "two", 3: "three", 4: "four", 5: "five",
        6: "six", 7: "seven", 8: "eight", 9: "nine",
        10: "ten", 11: "eleven", 12: "twelve",
        13: "thirteen", 14: "fourteen", 15: "fifteen", 16: "sixteen",
        17: "seventeen", 18: "eighteen", 19: "nineteen"
    }
    return sorted(_list, key=lambda num: number_names[num])


"""
Ex3
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é composition(f, g), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–µ
—Ñ—É–Ω–∫—Ü–∏–∏: f –∏ g, -- –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –∫–æ–º–ø–æ–∑–∏—Ü–∏—é.

–ù–µ –≤–¥–∞–≤–∞—è—Å—å –≤ –ª–∏—à–Ω–∏–µ —Å–µ–π—á–∞—Å –¥–µ—Ç–∞–ª–∏,  –Ω–∞–∑–æ–≤—ë–º –∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π ùëì‚àòùëî –¥–≤—É—Ö
–∑–∞–¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ùëì, ùëî —Ñ—É–Ω–∫—Ü–∏—é ‚Ñé, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π

  ‚Ñé(ùë•)=ùëì(ùëî(ùë•))

–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
—É —Ñ—É–Ω–∫—Ü–∏–∏ g –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫–∏–µ —É–≥–æ–¥–Ω–æ,
–∏ –ª—é–±–æ–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–µ–π g –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç
–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ f.

–ü—Ä–∏–º–µ—Ä—ã:
h = composition(lambda x: x**2, lambda x: x + 1)
print(h(5))

>>> 36


h = composition(lambda x: x, composition(lambda x: x**2, lambda x: x + 1))
print(h(5))

>>> 36


h = composition(sum, lambda x, y, z: (x**2, y**3, z**4))
print(h(2, 3, 9))

>>> 6592
"""


def composition(func_1, func_2):
    def _composition(*args, **kwargs):
        return func_2(func_1(*args, **kwargs))
    return _composition


"""
Ex4
–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä flip, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç —Ç–∞–∫, —á—Ç–æ –∑–∞–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ —Å–≤–æ–∏ –Ω–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ, –æ–±—Ä–∞—Ç–Ω–æ–º —Ç–æ–º—É,
–≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Ö –ø–µ—Ä–µ–¥–∞–ª–∏ (–¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Å –∏–º–µ–Ω–µ–º –Ω–µ –≤–ø–æ–ª–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
—É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)

–ü—Ä–∏–º–µ—Ä:
@flip
def div(x, y, show=False):
    res = x / y
    if show:
        print(res)
    return res


div(2, 4, show=True)
>>> 2.0
"""


def flip(func):
    def decorator(*args, **kwargs):
        return func(*args[::-1], **kwargs)
    return decorator


@flip
def div(x, y):
    return x / y


"""
Ex5
–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä introduce_on_debug, –∫–æ—Ç–æ—Ä—ã–π
–¥–µ–ª–∞–µ—Ç —Ç–∞–∫, —á—Ç–æ –∑–∞–¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∞–µ—Ç —Å–≤–æ—ë –∏–º—è
–ø—Ä–∏ –≤—ã–∑–æ–≤–µ, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è debug –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True.

–ü—Ä–∏–º–µ—Ä:
@introduce_on_debug(debug=False)
def identity(x):
    return x

identity(239)
>>> 239

@introduce_on_debug(debug=True)
def identity(x):
    return x

identity(57)
>>> identity
57
"""


def introduce_on_debug(debug=False):
    def inner(func):
        def decorator(*args, **kwargs):
            if debug:
                print(f'Function name = {func.__name__}')
            return func(*args, **kwargs)
        return decorator
    return inner


@introduce_on_debug(debug=True)
def identity(x):
    return x


print(identity(5))

"""
Ex6
–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä timer, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
"""


def timer(func):
    def decorator(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        return result, time.time() - start
    return decorator


@timer
def func_sleep(seconds):
    time.sleep(seconds)


if __name__ == "__main__":
    assert sort_by_abc([0, 1, 1, 2, 3, 5, 8, 13]) == [8, 5, 1, 1, 13, 3, 2, 0]

    test_func = composition(lambda x: x ** 2, lambda x: x + 1)
    assert test_func(3) == 10

    assert div(4, 2) != 2
    assert div(4, 2) == 0.5

    result, seconds = func_sleep(4)
    print(seconds)
    assert seconds > 4
